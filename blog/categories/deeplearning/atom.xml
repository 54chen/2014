  <?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Category: Deeplearning | 五四陈科学院]]></title>
    <link href="https://www.54chen.com/blog/categories/deeplearning/atom.xml" rel="self"/>
    <link href="https://www.54chen.com/"/>
    <updated>2017-12-29T18:10:29+08:00</updated>
    <id>https://www.54chen.com/</id>
    <author>
      <name><![CDATA[54chen]]></name>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>
  
    
    <entry>
      <title type="html"><![CDATA[优化器、激活函数、评价函数]]></title>
      <link href="https://www.54chen.com/blog/2017/05/19/optimizer/"/>
      <updated>2017-05-19T10:47:32+08:00</updated>
      <id>https://www.54chen.com/blog/2017/05/19/optimizer</id>
      <content type="html"><![CDATA[<p>以下是神经网络训练中经常会遇到的一些概念，进行了收集总结，供需要时查阅。</p>
  
  <p><img src=http://chen54.b0.upaiyun.com/1127/c10d_bg.jpg></p>
  
  <h2>LSE-最小二乘法</h2>
  
  <p>按偏差平方和最小的原则选取拟合曲线，并且采取二项式方程为拟合曲线的方法,称为最小二乘法。</p>
  
  <p>它通过最小化误差的平方和寻找数据的最佳函数匹配。</p>
  
  <p>利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。</p>
  
  <!--more-->
  
  
  <h2>GD-梯度下降算法</h2>
  
  <p>参考tf.train.GradientDescentOptimizer</p>
  
  <p>梯度下降（GD）是最小化风险函数、损失函数的一种常用方法，随机梯度下降和批量梯度下降是两种迭代求解思路。</p>
  
  <p>学习率是GD中最关键的参数，了每个梯度的大小，大了会反复振荡，小了会计算困难。</p>
  
  <h2>SGD-随机梯度下降算法</h2>
  
  <p>参考keras.optimizers.SGD</p>
  
  <p>为了解决GD里学习率的选择问题，SGD用随机的办法来减少计算学习率的次数。</p>
  
  <p>SGD伴随的一个问题是噪音较多，使得SGD并不是每次迭代都向着整体最优化方向。</p>
  
  <p>keras.optimizers.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False)</p>
  
  <p>参数：</p>
  
  <p>lr：大于0的浮点数，学习率</p>
  
  <p>momentum：大于0的浮点数，动量参，它模拟的是物体运动时的惯性，即更新的时候在一定程度上保留之前更新的方向，同时利用当前batch的梯度微调最终的更新方向。这样一来，可以在一定程度上增加稳定性，从而学习地更快，并且还有一定摆脱局部最优的能力，这个值在0-1之间，在训练开始时，由于梯度可能会很大，所以初始值一般选为0.5；当梯度不那么大时，改为0.9。</p>
  
  <p>decay：大于0的浮点数，每次更新后的学习率衰减值</p>
  
  <p>nesterov：布尔值，确定是否使用Nesterov动量-为true时，启用执行简单的梯度下降步骤。</p>
  
  <p>SGD通常训练时间更长，容易陷入鞍点，但是在好的初始化和学习率调度方案的情况下，结果更可靠。</p>
  
  <h2>Adagrad</h2>
  
  <p>参考keras.optimizers.Adagrad</p>
  
  <p>不建议修改keras Adagrad算法任何参数。</p>
  
  <p>会在学习的过程中自动调整 learning rate, 对于出现频率低的参数使用较大的 learning rate, 出现频率高的参数使用较小的 learning rate. 因此, 这种方法对于训练数据比较稀疏的情况比较适用. AdaGrad 可以提高 SGD 的鲁棒性。</p>
  
  <p>Adagrad 的缺点是,在深度学习中, 这种方法导致学习率的调整太激进, 因此常常过早结束了学习过程。</p>
  
  <h2>RMSprop</h2>
  
  <p>参考keras.optimizers.RMSprop</p>
  
  <p>RNN网络经常使用此算法，在keras里，推荐全部默认参数，除了学习率之外。</p>
  
  <p>RMSProp是一个非常高效的算法, 但是目前并没有发表。他改进了AdaGrad算法，也是一种自动调整学习率的算法。</p>
  
  <h2>Adadelta</h2>
  
  <p>参考 keras.optimizers.Adadelta</p>
  
  <p>不建议修改keras的默认参数。</p>
  
  <p>AdaGrad 方法比较激进, 会过早结束优化过程, AdaDelta 的目的就是为了解决这个问题. 在 AdaGrad 中对 learning rate 进行 normalize 的参数是使用之前所有时间得到的梯度的累积, AdaDelta 的是通过设置窗口 w, 只使用部分时间的梯度累积.</p>
  
  <h2>Adam</h2>
  
  <p>参考keras.optimizers.Adam</p>
  
  <p>adam算法来自于RMSprop的改进，论文中推荐的超参数为 eps=1e-6，bata1=0.9，beta2=0.999，keras参考此设置，也不建议修改。其效果相当于SGD+Nesterov Momentum再加上bias的纠正机制。</p>
  
  <p>在大部分实践过程中，数据比较稀疏的情况下，此算法比较通吃。</p>
  
  <h2>Adamax</h2>
  
  <p>参考keras.optimizers.Adamax</p>
  
  <p>是adam的一个变种，他对学习率变化的上限提供了更简单的范围。</p>
  
  <h2>Nadam</h2>
  
  <p>参考keras.optimizers.Nadam</p>
  
  <p>不推荐修改默认参数值。</p>
  
  <p>Nadam对学习率有了更强的约束，同时对梯度的更新也有更直接的影响。一般而言，在想使用带动量的RMSprop，或者Adam的地方，大多可以使用Nadam取得更好的效果。</p>
  
  <p>［后续为激活函数］</p>
  
  <h2>sigmoid-逻辑回归函数</h2>
  
  <p>参考keras激活函数activation-sigmoid。</p>
  
  <p>由于函数图像很像一个“S”型，所以该函数又叫 sigmoid。广义逻辑回归曲线可以模仿一些情况人口增长（ P ）的 S 形曲线。起初阶段大致是 指数增长 ；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。 函数。用于估计某种事物的可能性。可以用来回归，也可以用来分类，主要是二分类。它不像SVM直接给出一个分类的结果，而是这个样本属于正类或者负类的可能性是多少，当然在多分类的系统中给出的是属于不同类别的可能性，进而通过可能性来分类。</p>
  
  <h2>softmax-多元逻辑回归</h2>
  
  <p>参考tf.nn.softmax</p>
  
  <p>如果不是在[0,1]中取值，而是在K个类别中取值，这时问题就变为一个多分类问题。</p>
  
  <p>sigmoid函数只能分两类，而softmax能分多类，softmax是sigmoid的扩展。</p>
  
  <p>sigmoid将一个real value映射到（0,1）的区间（当然也可以是（-1,1）），这样可以用来做二分类。</p>
  
  <p>而softmax把一个k维的real value向量（a1,a2,a3,a4….）映射成一个（b1,b2,b3,b4….）其中bi是一个0-1的常数，然后可以根据bi的大小来进行多分类的任务，如取权重最大的一维。</p>
  
  <h2>tanh</h2>
  
  <p>tanh 网络的收敛速度要比sigmoid快。因为 tanh 的输出均值比 sigmoid 更接近 0，可降低所需的迭代次数。</p>
  
  <h2>ReLU</h2>
  
  <p>与传统的sigmoid激活函数相比，ReLU能够有效缓解梯度消失问题，从而直接以监督的方式训练深度神经网络，无需依赖无监督的逐层预训练，这也是2012年深度卷积神经网络在ILSVRC竞赛中取得里程碑式突破的重要原因之一。</p>
  
  <p>ReLU随着训练的推进，部分输入会落入硬饱和区，导致对应权重无法更新。这种现象被称为“神经元死亡”。</p>
  
  <p>ReLU还经常被“诟病”的一个问题是输出具有偏移现象，即输出均值恒大于零。偏移现象和 神经元死亡会共同影响网络的收敛性。</p>
  
  <p>PReLU是ReLU 和 LReLU的改进版本，具有非饱和性。RReLU是一种非确定性激活函数，其参数是随机的。这种随机性类似于一种噪声，能够在一定程度上起到正则效果。</p>
  
  <h2>ELU</h2>
  
  <p>融合了sigmoid和ReLU，左侧具有软饱和性，右侧无饱和性。右侧线性部分使得ELU能够缓解梯度消失，而左侧软饱能够让ELU对输入变化或噪声更鲁棒。ELU的输出均值接近于零，所以收敛速度更快。</p>
  
  <h2>Maxout</h2>
  
  <p>maxout网络能够近似任意连续函数，且当w2,b2,…,wn,bn为0时，退化为ReLU。Maxout能够缓解梯度消失，同时又规避了ReLU神经元死亡的缺点，但增加了参数和计算量。</p>
  
  <h2>softplus</h2>
  
  <p>softplus 是对 ReLU 的平滑逼近的解析函数形式。</p>
  
  <h2>softsign</h2>
  
  <p>类似tanh的非线性函数，很少被用到。</p>
  
  <p>［后续为损失函数］</p>
  
  <h2>loss function</h2>
  
  <p>用来评价训练数据的好坏函数。</p>
  
  <p>MSE = mean_squared_error 均方差：参数估计值与参数真值之差平方的期望值。最小二乘法的误差度量办法。而在实际应用中，通常会使用均方差（MSE）作为一项衡量指标。</p>
  
  <p>对于回归任务，一般都提供了mse损失函数（基于树的模型除外）。</p>
  
  <p>MAE = mean_absolute_error 平均绝对误差</p>
  
  <p>MAPE = mean_absolute_percentage_error 相对百分误差</p>
  
  <p>在现实数据中，往往会存在异常点，并且模型可能对异常点拟合得并不好，因此提高评价指标的鲁棒性至关重要，于是可以使用中位数来替代平均数，如MAPE。</p>
  
  <p>MSLE = mean_squared_logarithmic_error 对MSE加一层对数的优化</p>
  
  <p>KLD = kullback_leibler_divergence KL散度 从预测值概率分布Q到真值概率分布P的信息增益,用以度量两个分布的差异。</p>
  
  <p>cosine = cosine_proximity  即预测值与真实标签的余弦距离平均值的相反数。</p>
  
  <p>binary_crossentropy（亦称作对数损失，logloss） softmax作为最后一层常用的是代价函数是他。对数损失函数(logarithmicloss function) 或对数似然损失函数(log-likelihood loss function)都是他。</p>
  
  <p>categorical_crossentropy：亦称作多类的对数损失，注意使用该目标函数时，需要将标签转化为形如(nb_samples, nb_classes)的二值序列。</p>
  
  <p>sparse_categorical_crossentrop：如上，但接受稀疏标签。注意，使用该函数时仍然需要你的标签与输出值的维度相同，你可能需要在标签数据上增加一个维度：np.expand_dims(y,-1)。</p>
  
  <h2>Reference</h2>
  
  <p><a href="https://keras.io/optimizers/">https://keras.io/optimizers/</a></p>
  
  <p><a href="http://keras-cn.readthedocs.io/en/latest/other/objectives/">http://keras-cn.readthedocs.io/en/latest/other/objectives/</a></p>
  
  <p><a href="http://sebastianruder.com/optimizing-gradient-descent/index.html">http://sebastianruder.com/optimizing-gradient-descent/index.html</a></p>
  
  <p><a href="http://blog.csdn.net/viewcode/article/details/8794401">http://blog.csdn.net/viewcode/article/details/8794401</a></p>
  
  <p><a href="http://blog.jobbole.com/88521/">http://blog.jobbole.com/88521/</a></p>
  
  <p><a href="http://blog.csdn.net/u014422406/article/details/52805924">http://blog.csdn.net/u014422406/article/details/52805924</a></p>
  
  <p><a href="http://shuokay.com/2016/06/11/optimization/">http://shuokay.com/2016/06/11/optimization/</a></p>
  
  <p><a href="http://blog.csdn.net/xiaozhuge080/article/details/52688613">http://blog.csdn.net/xiaozhuge080/article/details/52688613</a></p>
  
  <p><a href="http://www.cnblogs.com/zhangbojiangfeng/p/6362963.html">http://www.cnblogs.com/zhangbojiangfeng/p/6362963.html</a></p>
  
  <p><a href="http://www.qingpingshan.com/bc/jsp/126064.html">http://www.qingpingshan.com/bc/jsp/126064.html</a></p>
  
  <p><a href="http://blog.csdn.net/u014595019/article/details/52562159">http://blog.csdn.net/u014595019/article/details/52562159</a></p>
  
  <p><a href="http://blog.csdn.net/mao_xiao_feng/article/details/53242235?locationNum=9&amp;fps=1">http://blog.csdn.net/mao_xiao_feng/article/details/53242235?locationNum=9&amp;fps=1</a></p>
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[利用深度学习解决直播支付风控]]></title>
      <link href="https://www.54chen.com/blog/2017/02/09/deeplearning/"/>
      <updated>2017-02-09T17:05:06+08:00</updated>
      <id>https://www.54chen.com/blog/2017/02/09/deeplearning</id>
      <content type="html"><![CDATA[<h2>前言</h2>
  
  <p>在直播软件中，典型的过程是A用户充值，送花给B用户，B用户提现。</p>
  
  <p>正是有这样一条变现的道路，无数盗刷、退款、36技术的黑产人盯上了直播，报道见到映客的损失一度到了300万人民币(本文价值至少300万了:P)。外链<a href="https://www.douban.com/group/topic/89441680/">https://www.douban.com/group/topic/89441680/</a></p>
  
  <p>本文介绍利用keras＋tensorflow，快速完成一个神经网络，从工程角度看深度学习带来的实际作用。</p>
  
  <p><img src=http://chen54.b0.upaiyun.com/1127/c10d_bg.jpg></p>
  
  <!--more-->
  
  
  <h2>安装</h2>
  
  <p>1.先升级pip</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="n">upgrade</span> <span class="n">pip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>2.安装keras</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">keras</span>
  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
  <span class="n">installing</span> <span class="n">collected</span> <span class="n">packages</span><span class="p">:</span> <span class="n">numpy</span><span class="p">,</span> <span class="n">scipy</span><span class="p">,</span> <span class="n">six</span><span class="p">,</span> <span class="n">theano</span><span class="p">,</span> <span class="n">pyyaml</span><span class="p">,</span> <span class="n">keras</span>
  <span class="n">Successfully</span> <span class="n">installed</span> <span class="n">keras</span><span class="o">-</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span> <span class="n">numpy</span><span class="o">-</span><span class="mf">1.12</span><span class="o">.</span><span class="mi">0</span> <span class="n">pyyaml</span><span class="o">-</span><span class="mf">3.12</span> <span class="n">scipy</span><span class="o">-</span><span class="mf">0.18</span><span class="o">.</span><span class="mi">1</span> <span class="n">six</span><span class="o">-</span><span class="mf">1.10</span><span class="o">.</span><span class="mi">0</span> <span class="n">theano</span><span class="o">-</span><span class="mf">0.8</span><span class="o">.</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>3.安装tensorflow</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">export</span> <span class="n">TF_BINARY_URL</span><span class="o">=&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://storage.apis.com/tensorflow/mac/cpu/tensorflow-1.0.0rc2-py2-none-any.whl&quot;</span><span class="o">&gt;</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">storage</span><span class="o">.</span><span class="n">apis</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">tensorflow</span><span class="o">/</span><span class="n">mac</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">tensorflow</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span><span class="n">rc2</span><span class="o">-</span><span class="n">py2</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
  <span class="n">chenzhen</span><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="n">upgrade</span> <span class="err">$</span><span class="n">TF_BINARY_URL</span>
  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
  <span class="n">Installing</span> <span class="n">collected</span> <span class="n">packages</span><span class="p">:</span> <span class="n">funcsigs</span><span class="p">,</span> <span class="n">pbr</span><span class="p">,</span> <span class="n">mock</span><span class="p">,</span> <span class="n">wheel</span><span class="p">,</span> <span class="n">pyparsing</span><span class="p">,</span> <span class="n">packaging</span><span class="p">,</span> <span class="n">appdirs</span><span class="p">,</span> <span class="n">setuptools</span><span class="p">,</span> <span class="n">protobuf</span><span class="p">,</span> <span class="n">tensorflow</span>
    <span class="n">Found</span> <span class="n">existing</span> <span class="n">installation</span><span class="p">:</span> <span class="n">wheel</span> <span class="mf">0.24</span><span class="o">.</span><span class="mi">0</span>
      <span class="n">Uninstalling</span> <span class="n">wheel</span><span class="o">-</span><span class="mf">0.24</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">Successfully</span> <span class="n">uninstalled</span> <span class="n">wheel</span><span class="o">-</span><span class="mf">0.24</span><span class="o">.</span><span class="mi">0</span>
    <span class="n">Found</span> <span class="n">existing</span> <span class="n">installation</span><span class="p">:</span> <span class="n">setuptools</span> <span class="mf">18.0</span><span class="o">.</span><span class="mi">1</span>
      <span class="n">Uninstalling</span> <span class="n">setuptools</span><span class="o">-</span><span class="mf">18.0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">Successfully</span> <span class="n">uninstalled</span> <span class="n">setuptools</span><span class="o">-</span><span class="mf">18.0</span><span class="o">.</span><span class="mi">1</span>
  <span class="n">Successfully</span> <span class="n">installed</span> <span class="n">appdirs</span><span class="o">-</span><span class="mf">1.4</span><span class="o">.</span><span class="mi">0</span> <span class="n">funcsigs</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">2</span> <span class="n">mock</span><span class="o">-</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">0</span> <span class="n">packaging</span><span class="o">-</span><span class="mf">16.8</span> <span class="n">pbr</span><span class="o">-</span><span class="mf">1.10</span><span class="o">.</span><span class="mi">0</span> <span class="n">protobuf</span><span class="o">-</span><span class="mf">3.2</span><span class="o">.</span><span class="mi">0</span> <span class="n">pyparsing</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mi">10</span> <span class="n">setuptools</span><span class="o">-</span><span class="mf">34.1</span><span class="o">.</span><span class="mi">1</span> <span class="n">tensorflow</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span><span class="n">rc2</span> <span class="n">wheel</span><span class="o">-</span><span class="mf">0.29</span><span class="o">.</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>4.检查安装是否成功</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kn">import</span> <span class="nn">keras</span><span class="p">;</span> <span class="k">print</span> <span class="n">keras</span><span class="o">.&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">version</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span>
  <span class="n">Using</span> <span class="n">TensorFlow</span> <span class="n">backend</span><span class="o">.</span>
  <span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>5.检查配置是否正确</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">cat</span> <span class="o">~/.</span><span class="n">keras</span><span class="o">/</span><span class="n">keras</span><span class="o">.</span><span class="n">json</span>
  <span class="p">{</span>
      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">image_dim_ordering</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">tf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">epsilon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="mf">1e-07</span><span class="p">,</span>
      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatx</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">float32</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">backend</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">tensorflow</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>6.安装h5py 用来保存权重数据</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">h5py</span>
  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
  <span class="n">Installing</span> <span class="n">collected</span> <span class="n">packages</span><span class="p">:</span> <span class="n">h5py</span>
  <span class="n">Successfully</span> <span class="n">installed</span> <span class="n">h5py</span><span class="o">-</span><span class="mf">2.6</span><span class="o">.</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>7.安装 scikit-learn 用来写代码自动计算最优超参</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">scikit</span><span class="o">-</span><span class="n">learn</span>
  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
  <span class="n">Installing</span> <span class="n">collected</span> <span class="n">packages</span><span class="p">:</span> <span class="n">scikit</span><span class="o">-</span><span class="n">learn</span>
  <span class="n">Successfully</span> <span class="n">installed</span> <span class="n">scikit</span><span class="o">-</span><span class="n">learn</span><span class="o">-</span><span class="mf">0.18</span><span class="o">.</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>8.安装hyperas 用来自动计算最优超参</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pip</span> <span class="n">install</span> <span class="n">hyperas</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <h2>准备数据</h2>
  
  <p>首先拿线上两天的数据，一天用来训练，一天用来测试。</p>
  
  <p>数据都是csv的，根据过去的经验，一个用户给另一个用户刷钱，能拿到的数据项有：</p>
  
  <p>1.是否白名单 2.是否签约 3.粉丝数量 4.是否入库 5.播放次数  6.播放时长  7.充值总次数 8.关注数量  等8个数据</p>
  
  <p>所有数据均为数字，再在9位上加上0表示正常1表示有问题的用户（有问题的用户是通过之前不正常的充值靠人肉挑的）。</p>
  
  <h2>准备模型</h2>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">cat</span> <span class="n">deep</span><span class="o">.</span><span class="n">py</span>
  <span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
  <span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span>
  <span class="kn">import</span> <span class="nn">numpy</span>
  <span class="n">dataset</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">0207.</span><span class="n">csv</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">delimiter</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
  <span class="n">X</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
  <span class="n">Y</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[:,</span><span class="mi">8</span><span class="p">]</span>
  <span class="n">dataset2</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">0208.</span><span class="n">csv</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">delimiter</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
  <span class="n">Z</span> <span class="o">=</span> <span class="n">dataset2</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
  <span class="n">Q</span> <span class="o">=</span> <span class="n">dataset2</span><span class="p">[:,</span><span class="mi">8</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">输入</span><span class="mi">8</span><span class="err">个参数，隐藏层</span><span class="mi">12</span><span class="err">个神经元，先用</span><span class="n">relu</span><span class="err">激活，输出用</span><span class="n">sigmoid</span><span class="err">激活</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
  <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">input_dim</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">activation</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">relu</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span>
  <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">sigmoid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">loss</span><span class="err">用</span><span class="n">mse</span> <span class="err">优化用</span><span class="n">Adamax</span>  <span class="err">准确率衡量</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">mse</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">optimizer</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Adamax</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">accuracy</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">训练</span><span class="mi">100</span><span class="err">次，每次取</span><span class="mi">60</span><span class="err">行</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">nb_epoch</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">测试数据</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">loss</span><span class="p">,</span> <span class="n">accuracy</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">Q</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="n">nLoss</span><span class="p">:</span> <span class="o">%.</span><span class="mi">2</span><span class="n">f</span><span class="p">,</span> <span class="n">Accuracy</span><span class="p">:</span> <span class="o">%.</span><span class="mi">2</span><span class="n">f</span><span class="o">%%&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">保存下来训练好的模型供线上使用</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">serialize</span> <span class="n">model</span> <span class="n">to</span> <span class="n">JSON</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">model_json</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">to_json</span><span class="p">()</span>
  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">model</span><span class="o">.</span><span class="n">json</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">w</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="k">as</span> <span class="n">json_file</span><span class="p">:</span>
      <span class="n">json_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">model_json</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">serialize</span> <span class="n">weights</span> <span class="n">to</span> <span class="n">HDF5</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">model</span><span class="o">.</span><span class="n">save_weights</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">model</span><span class="o">.</span><span class="n">h5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Saved</span> <span class="n">model</span> <span class="n">to</span> <span class="n">disk</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <h2>使用模型</h2>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">cat</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span>
  <span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
  <span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span>
  <span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">model_from_json</span>
  <span class="kn">import</span> <span class="nn">numpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dataset2</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">0208.</span><span class="n">csv</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">delimiter</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
  <span class="n">Z</span> <span class="o">=</span> <span class="n">dataset2</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
  <span class="n">Q</span> <span class="o">=</span> <span class="n">dataset2</span><span class="p">[:,</span><span class="mi">8</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">load</span> <span class="n">json</span> <span class="ow">and</span> <span class="n">create</span> <span class="n">model</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">json_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">model</span><span class="o">.</span><span class="n">json</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
  <span class="n">loaded_model_json</span> <span class="o">=</span> <span class="n">json_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
  <span class="n">json_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
  <span class="n">loaded_model</span> <span class="o">=</span> <span class="n">model_from_json</span><span class="p">(</span><span class="n">loaded_model_json</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">load</span> <span class="n">weights</span> <span class="n">into</span> <span class="n">new</span> <span class="n">model</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">loaded_model</span><span class="o">.</span><span class="n">load_weights</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">model</span><span class="o">.</span><span class="n">h5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Loaded</span> <span class="n">model</span> <span class="kn">from</span> <span class="nn">disk</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">test</span> <span class="n">data</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">loaded_model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">mse</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">optimizer</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Adamax</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">accuracy</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
  <span class="n">score</span> <span class="o">=</span> <span class="n">loaded_model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
  <span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="k">for</span> <span class="n">test</span> <span class="o">%</span><span class="n">s</span><span class="p">:</span> <span class="o">%.</span><span class="mi">2</span><span class="n">f</span><span class="o">%%&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">loaded_model</span><span class="o">.</span><span class="n">metrics_names</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">score</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">prediction</span> <span class="n">probabilities</span><span class="err">里有预测的结果，需要启动一个简单的</span><span class="n">server</span><span class="err">对外服务即可。</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">probabilities</span> <span class="o">=</span> <span class="n">loaded_model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
  <span class="n">predictions</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">probabilities</span><span class="p">]</span>
  <span class="n">accuracy</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">predictions</span> <span class="o">==</span> <span class="n">Q</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Prediction</span> <span class="n">Accuracy</span><span class="p">:</span> <span class="o">%.</span><span class="mi">2</span><span class="n">f</span><span class="o">%%&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">%</span> <span class="p">(</span><span class="n">accuracy</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <h2>超参调优</h2>
  
  <p>前面讲了工程使用的步骤，里面的参数都是随便写的，准确率大约60％，现在来讲如何让预测更加准确。</p>
  
  <p>test1是认好训练50次每次10条效果最好。</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">python</span> <span class="n">test1</span><span class="o">.</span><span class="n">py</span>
  <span class="n">Best</span><span class="p">:</span> <span class="mf">0.696000</span> <span class="n">using</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nb_epoch</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="mi">50</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">batch_size</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="mi">10</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>test2确认好优化器使用Adam效果最好。</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">python</span> <span class="n">test1</span><span class="o">.</span><span class="n">py</span>
  <span class="n">Best</span><span class="p">:</span> <span class="mf">0.686000</span> <span class="n">using</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">optimizer</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Adam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>test3是优化器使用SGD时，确认里面的两个参数。</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">python</span> <span class="n">test3</span><span class="o">.</span><span class="n">py</span>
  <span class="n">Best</span><span class="p">:</span> <span class="mf">0.654000</span> <span class="n">using</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">learn_rate</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="mf">0.001</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">momentum</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="mf">0.8</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>test4是初化类型。</p>
  
  <p>test5是激活函数类型。</p>
  
  <p>test6是dropout层的参数。</p>
  
  <p>test7是隐藏层神经元数量确定。</p>
  
  <p>相关的python代码见后。</p>
  
  <h2>Hyperas超参调优</h2>
  
  <p>上面一种调优办法有点麻烦，要一个一个试。</p>
  
  <p>Hyperas可以一次性完成。</p>
  
  <p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chenzhen</span><span class="err">$</span> <span class="n">python</span> <span class="n">testh</span><span class="o">.</span><span class="n">py</span>
  <span class="n">Evalutation</span> <span class="n">of</span> <span class="n">best</span> <span class="n">performing</span> <span class="n">model</span><span class="p">:</span>
  <span class="mi">192</span><span class="o">/</span><span class="mi">200</span> <span class="p">[</span><span class="o">===========================&gt;..</span><span class="p">]</span> <span class="o">-</span> <span class="n">ETA</span><span class="p">:</span> <span class="mi">0</span><span class="n">s</span><span class="p">[</span><span class="mf">0.35499999999999998</span><span class="p">,</span> <span class="mf">0.64500000000000002</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
  
  <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
  
  <p>Hyperas的执行结果直接保存了model，简单粗暴。代码见后。</p>
  
  <h2>后记</h2>
  
  <p>前面的模型，都比较简单，只定义了两三层，输入8个参数输出1个参数，然后有15个神经元的隐藏层，在testh.py里的调整参数时，增加了一些Activation层。</p>
  
  <p>要在工程上使用，还得上到分布式tensorflow上，进行更多的训练，以达到测试集的准确率更高。</p>
  
  <p>然后将保存下来的model，使用run.py里的逻辑，做成线上server，提供预测判断服务。</p>
  
  <p>预测的同时，要提供人工抽检反复训练，将判断错和判断漏的，都加入到训练的过程中去，做成定时过程，才能满足需要。</p>
  
  <p>另外不得不提的一点：将输入的数字归一化到0－1之间，对BPNN网络的训练效率会大大提升。</p>
  
  <h2>相关代码</h2>
  
  <p>上述所有代码均在 <a href="https://github.com/54chen/deep">https://github.com/54chen/deep</a> 。</p>
  ]]></content>
    </entry>
    
  </feed>
