  <?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Category: 企业 | 五四陈科学院]]></title>
    <link href="https://www.54chen.com/blog/categories/qi-ye/atom.xml" rel="self"/>
    <link href="https://www.54chen.com/"/>
    <updated>2017-12-29T18:10:29+08:00</updated>
    <id>https://www.54chen.com/</id>
    <author>
      <name><![CDATA[54chen]]></name>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>
  
    
    <entry>
      <title type="html"><![CDATA[小米大树part1.5:基础架构之痛答疑]]></title>
      <link href="https://www.54chen.com/blog/2016/08/01/mi1-dot-5/"/>
      <updated>2016-08-01T14:49:40+08:00</updated>
      <id>https://www.54chen.com/blog/2016/08/01/mi1-dot-5</id>
      <content type="html"><![CDATA[<p>上周末发了第一篇，在微博收到了许多朋友的反馈，可能是写得匆忙，没能完整描述，特加1.5，专门针对各位的问题进行答疑。</p>
  
  <p><img src=http://img03.taobaocdn.com/imgextra/i3/T1.1RSXmRfXXXjG9sV_021627.jpg></p>
  
  <p>原文地址：《小米大树part1:基础架构之痛》| <a href="https://www.54chen.com/blog/2016/07/29/mi/">https://www.54chen.com/blog/2016/07/29/mi/</a></p>
  
  <!--more-->
  
  
  <h2>问题一、集权</h2>
  
  <p>Q:@浩松 &hellip;为啥我觉得博主还是没有找到原因。这个东西就和为什么要统一度量衡统一文字集权虽然不同地方的方言可能有差别一样的，和有没有腾讯的人一点关系都没有啊</p>
  
  <p>A:其实我想表达的，并非是统一度量衡这个问题，发展过程中，大家的度量衡其实是统一的。而更大的问题是，度量衡本身不科学，我们大多数时间在监控一个服务自身的qps\percentile等数值，却没有一个可用性的数值来监控和报警，这是根本点。</p>
  
  <h2>问题二、吹腾讯</h2>
  
  <p>Q:@咩罗 花式吹腾讯&hellip;</p>
  
  <p>A:完全是个无心之举，但从腾讯过去从来不参加开源到现在一点一点放出来技术细节，的确要高于行业水平。回忆一下，已经很久没有遇到QQ大规模故障了。</p>
  
  <h2>问题三、git/memcahce也拿来说</h2>
  
  <p>Q:@沧落海 我靠，git，memcache都能拿来说</p>
  
  <p>A:为什么不能拿来说，git现在是十岁多，我在讲的五六年前的事情，国内还在流行svn，我们的团队还有人连svn都没用过。而memcache，我们引入的实际上是zookeeper和memcache的合体解决方法，做到自动化配置。</p>
  
  <h2>问题四、语言</h2>
  
  <p>Q:@辩图识人生 引入C基础架构，排除gc影响，提高吞吐。&ndash;现在基础平台以c为主？</p>
  
  <p>A:只是部分，因为小米还是没有CTO这样的行政岗位，有基础的团队自己会跑在前面，并不强求全公司的基础架构都发生改变。</p>
  
  <h2>问题五、版式</h2>
  
  <p>Q:@Easy 页面的行间距调一下吧……看着好诡异……</p>
  
  <p>A:这是个好问题，顺手调了一下，不知道大家感觉如何。</p>
  
  <h2>预告</h2>
  
  <p>《小米大树part2：测试之痛》大约周末有功夫写，写完就发。大概会记录当时我们如何做不了单元测试、如何做冒烟测试、如何在压力测试上失败，以及如何不测试。</p>
  
  <p><input type="hidden" id="mid" name="mid" value="4003741180911627" /></p>
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[小米大树part1:基础架构之痛]]></title>
      <link href="https://www.54chen.com/blog/2016/07/29/mi/"/>
      <updated>2016-07-29T17:11:38+08:00</updated>
      <id>https://www.54chen.com/blog/2016/07/29/mi</id>
      <content type="html"><![CDATA[<h2>题记</h2>
  
  <p>无知和弱小不是生存的障碍，傲慢才是。 －－《三体》</p>
  
  <h2>缘起</h2>
  
  <p>一直想写一系列的笔记，记录整个小米六年的研发工作中实际遇到的困难，以及这一大群人如何不可避免的走向大公司氛围，又如何慢慢打破定势，苦于自己拖延症影响，现在才开始总结。</p>
  
  <p>共分三个部分：基础架构之痛、测试之痛、产品进度之痛。本篇是第一部分。</p>
  
  <p><img src=http://img03.taobaocdn.com/imgextra/i3/T1.1RSXmRfXXXjG9sV_021627.jpg></p>
  
  <h2>基础</h2>
  
  <p>2010年，第一批服务器工程师来自五湖四海，有金山、微软、、百度、人人，唯独，没有来自最大互联网公司－腾讯。</p>
  
  <p>A君（人物纯属虚构，以求表达效果）从业数年，经验丰富，说：“我觉得我们可以用一些php，简单好招人”，于是开始这样干了。</p>
  
  <p>B君说：“我们还可以用一些java，招人也不太难，现成的东西多”，于是这样作了。</p>
  
  <!--more-->
  
  
  <p>C君说：“的thrift也不错，我们需要一个这样的rpc框架”，于是用上了thrift。</p>
  
  <p>D君说：“与客户端最简单，还是用http请求吧，加上json，调起来方便”，于是就http+json了。</p>
  
  <p>E君和F君带来了先进的海外大公司经验，大家都深信不疑。</p>
  
  <p>G君带来了maven，H君带来了git，I君带来了zookeeper，J君带来了memcache，K君带来了scribe，L君带来了hadoop，M君带来了HBase，N君带来了spring。。。</p>
  
  <p>两年之后，诸君磨合成了以java为核心，诸多语言为辅助，看上去哪哪都大厂的基础体系。并且大家都认为可以为各兄弟无脑使用了。</p>
  
  <h2>问题</h2>
  
  <p>两年之后，人多事杂，诸君分为多个，多个都在共用着这一整套基础架构。</p>
  
  <p>有一天，X君在调用Y君的接口出现了速度突然变慢了一倍，从10ms的速度变成了100ms（因为基础架构里没有可用性的计算，X君也是在用户投诉说最外层的API慢，分析之后才发现只有可能是这里慢了）。</p>
  
  <p>X：“Y啊，你的服务不稳定啦，怎么慢了10倍，影响我们的服务啦”。</p>
  
  <p>Y：“不对啊，从基础架构里提供的counter看，我们的服务一切正常，99.9%的请求，都在5ms返回了”。</p>
  
  <p>X：“真的是你这边慢了，你再查查吧”。</p>
  
  <p>Y：“可能是网络有问题吧，我们的服务真的没有问题”。</p>
  
  <p>X无可奈何，Y也觉得自己没有过错，转身，X抱怨了一句：“TMD现在怎么这么官僚啊”。Y也莫名其妙：“草，A这的人太找茬了”。</p>
  
  <p>Z君在网络，从交换机上看了一下图，“网络一切正常”。</p>
  
  <p>这个技术问题就这样没有了结论。</p>
  
  <h2>原因</h2>
  
  <p>上述的场景在一天又一天演进，慢慢形成了所谓的大公司氛围，除非同一的人遇到了问题，很难将一个问题查到根本原因。</p>
  
  <p>而X君遇到的问题，也没有专家团队可以帮忙解决，因为当年引入技术的专家们，分散在各个，在为各自的方向努力，根本无暇顾及。</p>
  
  <p>靠前人拼凑出来的基础架构里，多年过去也没有可用性这样直接抽象的数据和监控报警。</p>
  
  <h2>X君之痛</h2>
  
  <p>根本的原因，是基础架构里，没有一个CTO的角色，从技术上进行抽象思考，从行政上强迫统一。</p>
  
  <p>腾讯的前CTO张志东应该是个牛逼的人，带领老一辈的技术高人们，没有这么多开源的项目可以借用，所有的东西都要靠自己来抽象。</p>
  
  <p>在没有开源行业的这个大保障（大包袱），腾讯的基础架构抽象得出奇的自然，再经过几代人的修补，已经坚不可破。</p>
  
  <p>而X君这次遇到的问题，痛点在于：1.基础架构里的监控数据无法表达X君、Y君服务的可用性。2.Y君所参考的基础架构里的自身监控数据也无法认同X君说自己的服务不稳定的现实。3.X君和Y君，都没有意识到，网络也是服务的一环，而不是交给硬件和网络维护。4.X和Y君都在使用java，典型的gc问题就可能导致双方的数据全部不可靠。</p>
  
  <h2>打破常规</h2>
  
  <p>在第四五年的时候，已经开始有在打破上述的常规：</p>
  
  <p>1.引入C基础架构，排除gc影响，提高吞吐。</p>
  
  <p>2.主动调用方以承诺最大延时得出可用性数据描述被动调用方服务稳定性，并且双方达成一致。</p>
  
  <p>3.除非有明确的原因分析结果，绝不把问题抛向相关团队。</p>
  
  <p>4.每个环节，都有可用性数据，包括客户端。</p>
  
  <p>一句话概括，对于互联网业务，可用性就是一切。</p>
  
  <p><input type="hidden" name="mid" id="mid" value="4002959094296739" /></p>
  ]]></content>
    </entry>
    
  </feed>
