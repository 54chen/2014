  <?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Category: 资料文档 | 五四陈科学院]]></title>
    <link href="https://www.54chen.com/blog/categories/zi-liao-wen-dang/atom.xml" rel="self"/>
    <link href="https://www.54chen.com/"/>
    <updated>2017-12-29T18:10:29+08:00</updated>
    <id>https://www.54chen.com/</id>
    <author>
      <name><![CDATA[54chen]]></name>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>
  
    
    <entry>
      <title type="html"><![CDATA[创业启示录]]></title>
      <link href="https://www.54chen.com/blog/2013/06/27/startup/"/>
      <updated>2013-06-27T00:00:00+08:00</updated>
      <id>https://www.54chen.com/blog/2013/06/27/startup</id>
      <content type="html"><![CDATA[<p><img src="http://img03.taobaocdn.com/imgextra/i3/T13gR3Xa4cXXcFX9c3_050845.jpg" alt="startup" />
  <strong>创业公司之痛</strong>
  某某公司上市，A君扯旗创业，由A君朋友OR亲戚投资人投资，拉走某某公司原团队人马十几号人。<br />
  第一个月，山盟海誓。有某资源，可做某大事。大家走起。git、svn、php、java、rabbitmq、tomcat、nginx、iOS、android，一人分多角，身兼数职。轰轰烈烈，搞起。<br />
  第三个月，产品咋还不出来，出钱的原传统行业投资人略恼。<br />
  第六个月，同上。<br />
  第九个月，继续同上。<br />
  第十二个月，出产品了，四不像。投资人痛哭。打算主控方向。<br />
  第十五个月，投资人的不转弯方向继续着，人员补充和流失在双向进行，怨声载道、团队骂、投资人骂、没效果！<br />
  第N个月，A君提出，是不是我们方向不对，换个方向吧？<br />
  。。。<br />
  A君多年之后，打来电话，已然转到其他地方，原队伍解散。思考得一句话：大公司出来的，不能一个公司的人在一起，一定要掺点别的味道才有机会。</p>
  
  
  
  
  <p><strong>创业公司到中型公司转型之痛</strong>
  B君的公司已经上百人了，业务还行，不属于最好，也不属于最差，不过能够养活这几百号人了，业内也对公司看好。<br />
  B君这些年走得很稳健，不然活不到现在。<br />
  特点是研发线上不可或缺、不乱加人。<br />
  兄弟们都是土生土长的土包子，要么是一毕业就来了这里，没见过外面的市面，要么是二三线小公司混过来的，也没见过啥大系统。<br />
  hadoop+hive，一个兄弟搞定，统计各业务线兄弟自己来，所有人学一学都会hql语法。<br />
  mysql dba，两个兄弟搞定，一个带一个。人均几百个实例。哼哼，平时还要帮着研发sql。<br />
  deploy、ops，两三个兄弟搞定，也是一个带一个，有专门做工具，有经常半夜起来，或者是打电话叫人，或者是跑机房上机器。<br />
  另外还有什么daily build、test framework，等等公共的东西，都是研发兄弟们在业余时间总结搞出来的，很稳定也没有专门的人在维护，有问题就有人。</p>
  
  
  
  
  <p>几年过去了，B君去年出现的时候，告知团队除了正常业务外，开始在搞内部的运维平台，不算赶时髦，因为机器有点多，没有个系统管理的话，有点乱。搞完了发现，和后来流行的paas平台很像。瞎猫碰了死耗子了。</p>
  
  
  
  
  <p>B君公司很好，后去的人说，想这两年上市了，我怀疑是B君上班上累了吧？想套现？未经验证，不过的确是时间太长了，给兄弟们不太好交待了。</p>
  
  
  
  
  <p>C君公司比较牛B，比较看不起B君的公司，因为C君团队全线大公司＋海归。<br />
  豪华阵容一有分歧，开会的时候都在讲，我在的XX公司如何做，眼神坚定得似乎还在那个公司一般。<br />
  C君公司因为资金雄厚，比起B君公司也不差，歪歪斜斜的也过来了，在市场占了一席之地。<br />
  现在C君的公司在研究研发资源优化，创业公司要转型成中型公司或者大型公司，简单说，就是别几个团队一起在做同一个东西。<br />
  按照C君过去在XX公司的经历，a工作一定是A团队的，那B团队做了就是他分配工作的失职。<br />
  C君公司里，现在天天开会讨论的都是这个x功能应该谁做，似乎已经是中型公司了。</p>
  
  
  
  
  <p>以上，谨是观察到的式创业现象，切勿对号入座。<br />
  只要不扯淡、坚持、持续，在成功的企业还是有很多的。</p>
  
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[庆某会召开，发2012总结]]></title>
      <link href="https://www.54chen.com/blog/2013/03/11/2012/"/>
      <updated>2013-03-11T00:00:00+08:00</updated>
      <id>https://www.54chen.com/blog/2013/03/11/2012</id>
      <content type="html"><![CDATA[<p><img src="http://img04.taobaocdn.com/imgextra/i4/T14z9eXa4fXXXUxOU4_053357.jpg" alt="2012 54chen总结" />
  <strong>开场致辞</strong>
  2012年，全年情绪稳定，采取了各种手段遏制了技术水平过快下降势头，共计发出80篇左右博客。
  <a href="http://www.54chen.com/2012">http://www.54chen.com/2012</a></p>
  
  
  
  
  <p><strong>十大感动我自己内容</strong></p>
  
  
  
  
  <p>1.rose框架使用入门手册连载，详细记载了新手入门java开发框架的过程，用时大概2个月<a href="http://www.54chen.com/rose.html" target="_blank">http://www.54chen.com/rose.html</a></p>
  
  
  
  
  <p>2.cloud foundry代码阅读手记,  记录了所有的ruby学习、cf代码学习、服务器虚拟化文案warden细节，用时大概2个月 <a href="http://www.54chen.com/tag/cloud-foundry">http://www.54chen.com/tag/cloud-foundry</a></p>
  
  
  
  
  <p>3.riak早期代码阅读手记，记录了对分布式存储riak的代码解析过程，相当稳定的一个dynamo产品！<a href="http://www.54chen.com/tag/riak">http://www.54chen.com/tag/riak</a></p>
  
  
  
  
  <p>4.好用的搜索文案senseidb使用手记，现在他的作者之一已经来到了小米，而且小米更多员工也成为其项目开发人员。<a href="http://www.54chen.com/tag/senseidb">http://www.54chen.com/tag/senseidb</a></p>
  
  
  
  
  <p>5.linkedin的kafka使用手记，用sensei时学习的好东西，可以用来做日志收集、分发，比scribe的好处在于，它的集群和可配置。<a href="http://www.54chen.com/architecture/linkedin-kafka-usage.html">http://www.54chen.com/architecture/linkedin-kafka-usage.html</a></p>
  
  
  
  
  <p>6.用上了git和gitlab。<a href="http://www.54chen.com/tag/git">http://www.54chen.com/tag/git</a></p>
  
  
  
  
  <p>7.学用新语言GO。<a href="http://www.54chen.com/document/go-lang-install.html">http://www.54chen.com/document/go-lang-install.html</a></p>
  
  
  
  
  <p>8.学用新语言ruby。<a href="http://www.54chen.com/web-ral/learn-ruby-ubuntu.html">http://www.54chen.com/web-ral/learn-ruby-ubuntu.html</a></p>
  
  
  
  
  <p>9.解决了maven拉不到新jar的问题。<a href="http://www.54chen.com/java-ee/maven-nexus-jar-note.html">http://www.54chen.com/java-ee/maven-nexus-jar-note.html</a></p>
  
  
  
  
  <p>10.综合了各种测试方法以丰富写代码办法。<a href="http://www.54chen.com/tag/easymock">http://www.54chen.com/tag/easymock</a>   <a href="http://www.54chen.com/java-ee/spring-static-class-maven-cobertura-site.html">http://www.54chen.com/java-ee/spring-static-class-maven-cobertura-site.html</a></p>
  
  
  
  
  <p><strong>结论</strong>
  各位!<br />
  　　回顾过去，我们拼搏奋进，取得显著成就;展望未来，我们任重道远，仍须不懈努力。让我们紧密团结在以技术为核心的团队周围，解放，开拓创新，扎实工作，奋力开创社会现代化建设新局面!</p>
  
  
  
  
  <p>附2011年总结 <a href="http://www.54chen.com/life/spicy-fish-2011-2.html">http://www.54chen.com/life/spicy-fish-2011-2.html</a> 看2011年的第三条，多有预见性的一条！</p>
  
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[谈谈创业公司的技术选型－－朴素的技术观]]></title>
      <link href="https://www.54chen.com/blog/2012/12/04/startup-tech/"/>
      <updated>2012-12-04T00:00:00+08:00</updated>
      <id>https://www.54chen.com/blog/2012/12/04/startup-tech</id>
      <content type="html"><![CDATA[<p><img src="http://img03.taobaocdn.com/imgextra/i3/T13gR3Xa4cXXcFX9c3_050845.jpg" alt="创业公司技术选型" /></p>
  
  
  
  
  <p><strong>创业公司的定义</strong>
  把服务器数量在千台以内（如果存在服务端），或者业务没有爆发过或者是长时间没有爆发过的公司，叫做创业公司。</p>
  
  
  
  
  <p><strong>朴素技术观的定义</strong>
  有很多看上去很美好的技术，背后都有很多对应的很残酷的事实，在一个创业公司许多选择给你，你可以使用当前最炫的技术，也可以使用团队最擅长的技术。朴素世界观，是指所有选择使用团队最擅长技术的一种观念。</p>
  
  
  
  
  <p><strong>语言</strong>
  语言之争是最没品了，这里不争哪种语言好哪种语言坏。<br />
  这里有一个办法来选择语言：所有团队成员的简历中，出现最多的一种语言为标准。<br />
  例外情况：团队成员中有一位大拿，是某门语言的泰斗，不说在国际上，在国内也要有领头羊的成绩。印象中在创业中大量使用GO语言的许式伟大侠是例外中最典型的一个，不过看看人家的成绩，已经把GO摸的一清二楚了。</p>
  
  
  
  
  <p>反例：太多。</p>
  
  
  
  
  <p>以下条件满足可开启反例模式：<br />
  1.至少一人完全理解整个语言的语法<br />
  2.至少一人完全理解语言精髓<br />
  3.至少一人完全掌握此语言常见debug工具<br />
  4.至少一人在一个规模较小应用成功使用</p>
  
  
  
  
  <p><strong>存储</strong>
  这里主要讲服务器的存储。<br />
  如何选择：mysql+memcached至少在weibo、renren.com、taobao、qq、sina、baidu......等公司大量使用，如果你团队成员一个都不是来自这些公司，那大胆地用吧，用死也用不出什么毛病来。当然了，十分需要在业务爆发时找到一位可靠的mysql dba，这里要提一下人人网的创始员工DBA刘启荣大侠，引用一句前老板的话：×××无出启荣之右也。<br />
  反例：此处省去创业团队名字，有史可考。当年KV十分火爆，某兄弟对cassandra十分感冒，于是在整个系统初期设计时全部使用了这玩意。后来，开始市场宣传的时候，这玩意儿就是不行了，一行人接连多夜赶制回mysql。</p>
  
  
  
  
  <p>以下条件满足可开启反例模式：<br />
  1.使用cassandra要理解全篇dynamo文档所写，完全掌握RWN，完全熟知虚拟分区作用，清晰知道cassandra在分区上偷工减料所带来的影响。<br />
  2.团队成员里有一个人完全理解了这个要使用的东西的源代码。这里要提一下张宴大侠，他长年研究tt代码，在使用上已经很有一手，所以有他在的地方，用tt完全没有问题。如果国内有一个人冒出来说自己对cassandra代码长年研究，我一定不相信，因为这些项目代码行数已经超过一个人快速理解的能力，当你看完的时候，新的版本又出来了。<br />
  3.很多单独的解决方案，因为代码量不大，完全可以从零开始花人力搞定它，像redis，在新浪被用得很多，到了你的创业公司，不一定可以搞定，因为什么呢，你需要一个完整的人先摸透它的习性。摸透了习性的小项目，完全可以先在小项目上使用。</p>
  
  
  
  
  <p><strong>框架与分工</strong>
  框架的作用在于更加利于分工。<br />
  以服务端为例，java如果你选择了人人网切切王开源的rose框架的话，spring的好处一应俱全，而且因为其天生的restful的好处，最小粒度可以以api为分工。这样，在一个团队内部，任何人完全可以修改任何人的代码，因为是使用同一个框架，同一种思路，写出来的代码不会是完全两样的。php如果你选择的ZF之类的，以controller为单位的MVC模型一下子就定义了你的项目，同样也可以做到成员随意维护任意模块。</p>
  
  
  
  
  <p>如何选择：框架的选择只看。如果上有框架可选，那一定是选择验证过的。如果没有，那尽可能地花时间提炼框架。<br />
  反例：框架似乎人类写代码的常规总结行为，即便再烂的项目，在局部去看也一定会有一些框架性的代码存在。反例要说说discuz1.0以前的代码，感觉完全是应届生所为，想到哪里写到哪里，和放牛一样，维护基本上不可能。</p>
  
  
  
  
  <p>以下条件满足可开启反例模式：<br />
  1.android等客户端开发暂时还没有特别好的框架性的东西，不过android本身就是一个大框架，业务代码的框架需要自己提炼。<br />
  2.非常非常小的项目，瞬间写完要上线。<br />
  3.项目只用一次。<br />
  4.救火。</p>
  
  
  
  
  <p><strong>大项目与小项目</strong>
  反例：从超级大公司出来的工程师，特别是企业开发的同学，特别喜欢一个超级大的项目，把所有的功能都包括在里面。所有人一起，天天折腾这个trunk，动不动的我踩着你的脚了，你压着我的手了。<br />
  正例：换到互联网模式，所有项目能拆则拆，越扁平越好，每个部分有一个指定的master，主要负责此项目的稳定。这实际在开源界早就这样干了。实际作中，只要能够找到一个合适的master，就可以拆。</p>
  
  
  
  
  <p>没有任何条件可以开启反例模式。</p>
  
  
  
  
  <p><strong>流程与管理</strong>
  这个标题太大，分小来说。主要包括代码版本管理、依赖管理、代码制度、项目发布流程。这里没有反例，只讲经验。</p>
  
  
  
  
  <p>版本管理：目前大多数人还在使用svn，但是git真的非常非常好用。pro git book只需要一个晚上的仔细阅读，就一定可以学会。实际学习成本很低了，一个创业团队，这点学习能力都没有的人，赶紧离开你的团队吧。<br />
  依赖管理：java大多已经使用maven，老早的ant带一堆jar包的形式已经落后了，赶紧换。php的依赖管理一直都很弱，不过有人参考ruby搞了一个composer，可以试试，也许可以帮助改进。<br />
  代码制度：什么样的代码才可以checkin/merge master？一般的标准为：跑过所有的unit test、master维护者或者团队成员review通过。<br />
  项目发布流程：项目立项到项目上线，划分N个小阶段，实施scrum或者变体的scrum，但是一个原则就是任何一个阶段的不确定，都会在后面的阶段里放大，小步快跑才是正确的节奏，有时候宁愿不要一些功能，也一定要先发出来。</p>
  
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[移动互联网必备：各平台自助渠道打包手段公开]]></title>
      <link href="https://www.54chen.com/blog/2012/06/08/app-build/"/>
      <updated>2012-06-08T00:00:00+08:00</updated>
      <id>https://www.54chen.com/blog/2012/06/08/app-build</id>
      <content type="html"><![CDATA[<p><img src="http://img02.taobaocdn.com/imgextra/i2/13078490/T28EicXgtXXXXXXXXX_!!13078490.jpg" alt="mi" />
  移动互联网做app是个酷毙的事情，同等产品条件下比拼的是渠道。怎么样让渠道人员（非技术）快捷地拿到想到的标识有相关渠道信息的包，是个关键的问题。<br />
  因为平台不一样，打包手法也不尽相同，下面总结下54chen在工作过程中遇到的问题和解决的办法：</p>
  
  
  
  
  <p><strong>1.android</strong>
  android下无法将一个apk包修改字节流之后apk还重新生效，因为android加key的过程会使这一过程变得无效。<br />
  采取的办法：用ant或者maven在对java代码进行build时传入渠道信息。<br />
  简单地说：当你有一个xxx渠道的包需要打的时候，后台要做的事情就是 ant -Dchannel=xxx 或者 mvn -U clean package -Dchannel=xxx</p>
  
  
  
  
  <p><strong>2.iphone</strong>
  iphone的正式渠道很少，先说越狱过的：<br />
  一个ipa包就是一个标准的zip包，只要在包里放一个channel.txt，保存渠道信息。<br />
  简单地说：当你有一个xxx渠道包需要打的时候，后台要做的事情就是打开这个ipa，修改channel.txt的内容为xxx，重新按zip压缩为ipa。</p>
  
  
  
  
  <p>没有越狱过的iphone（占多数）：<br />
  安装渠道只有一个，那就是appstore。但是推广渠道可能是多个，用户点击后到达appstore，再从appstore下载。这个过程中，ipa包没有办法携带渠道信息，希望apple公司改进。有人用一次跳转记录用户ip，但是不能准确反馈这个渠道的安装量。</p>
  
  
  
  
  <p><strong>3.塞班</strong>
  sis/sisx的签名比较弱，签好的包，可以在包末尾写入一些字节达到携带渠道信息。<br />
  简单地说：当你有一个xxx渠道包需要打的时候，后台要做的事情就是打开这个文件，在最末尾写入xxx，关闭文件。</p>
  
  
  
  
  <p><strong>4.winphone</strong>
  xap包与ipa包极像，不一样的地方在于，xap包在windows下打出来的zip，文件分隔符是反斜线风格，在linux下解压压缩一定要用ant来做不容易写错。<br />
  简单地说：当你有一个xxx渠道包需要打的时候，后台要做的事情和iphone一样。不同在于要引入ant.jar。</p>
  
  
  
  
  <p>周末愉快！
  </p>
  
  ]]></content>
    </entry>
    
    <entry>
      <title type="html"><![CDATA[人肉解析riak_admin Join]]></title>
      <link href="https://www.54chen.com/blog/2012/02/10/riak_admin-join/"/>
      <updated>2012-02-10T00:00:00+08:00</updated>
      <id>https://www.54chen.com/blog/2012/02/10/riak_admin-join</id>
      <content type="html"><![CDATA[<p><img src="http://img04.taobaocdn.com/imgextra/i4/13078490/T2AT9jXolXXXXXXXXX_!!13078490.jpg" alt="riak" />
  riak_admin只是一个bash脚本，当riak_admin join被执行时，都是在执行riak_kv_console join。</p>
  
  
  
  
  <p><strong>大概过程分析</strong>
  riak_kv_console:join  =>  %%入口 <br />
  riak:Join(Node) => %% 真正执行<br />
      riak_core:join(Node) => %%去到riak_core<br />
          riak_core_gossip:legacy_gossip() => %%通知检查是否是 legacy gossip，<br />
      riak_core:standard_join(Node,Ring,false) =>  %%非rejoin 非legacy<br />
          riak_core_gossip:send_ring(Node, node()) =>  %% 进入gossip模块发起ring请求<br />
              gen_server:cast({?MODULE, FromNode}, {send_ring_to, ToNode}) => %%广而告之<br />
          riak_core_gossip:handle_cast({send_ring_to, Node}, State) => %%收到<br />
              gen_server:cast({?MODULE, Node}, {reconcile_ring, RingOut}) => %%告诉它们开始协调<br />
          riak_core_gossip:handle_cast({reconcile_ring, RingIn}, State) => %%收到<br />
              riak_core_ring_manager:ring_trans(fun reconcile/2, [OtherRing]) => %%由一个协调函数传入到ring manager中去执行<br />
              riak_core_ring_manager:prune_write_notify_ring => %%搞定一个新的ring文件，通知所有的listener<br />
              riak_core_ring_events:ring_update(Ring) => %%通过event通知<br />
  riak_core_ring_handler:handle_event({ring_update, Ring}, State) => %%接到event<br />
      riak_core_vnode_manager:ring_changed(Ring) => %%vnode_manager通知大家环修改了<br />
          riak_core_vnode_manager:trigger_ownership_handoff(?MODULE, {ring_changed, Ring}) =>%%接通知触发handoff<br />
              riak_core_vnode:trigger_handoff(Pid, TargetNode) => %%由vnode来干活<br />
                  gen_fsm:send_all_state_event(VNode, {trigger_handoff, TargetNode}) => %%使用gen_fsm来通知vnode们<br />
              riak_core_vnode:maybe_handoff => %%准备开始导数据<br />
              riak_core_vnode:start_handoff => %%开始<br />
              riak_core_handoff_manager:add_outbound => %%发handoff<br />
              handle_call({add_outbound,Mod,Idx,Node,Pid},_From,State=#state{handoffs=HS}) => %%收到请求<br />
                  riak_core_handoff_manager:send_handoff => %%发<br />
                      riak_core_handoff_sender_sup:start_sender => %%启动sender  最终启动了 riak_core_vnode_master:sync_command直到同步结束。 </p>
  
  
  
  
  <p> </p>
  
  
  
  
  <p><strong>riak_core_vnode:mark_handoff_complete</strong>
  此代码生存在riak_core_vnode，而不是riak_core_vnode_manager，因为ring_trans是一个同步的call到ring manager的过程，block一个单独的vnode要比block整个vnode manager要好。block这个manager会影响所有的vnode。此代码对多个并行的vnode执行是安全<br />
  的,因为靠单个 ring manager提供的同步化保证了拥有所有的环的变更经过 。</p>
  
  
  
  
  <p><strong>riak_core_vnode:vnode_command</strong>
  活动的vnode运行于三种状态中：正常、handoff、推进。<br />
  在正常状态，vnode命令靠handle_command来传递。当一个handoff被触发，handoff_node被设置为目标节点，并且这个vnode被称做进入了handoff状态。<br />
  在handoff状态，vnode命令依靠handle_handoff_command来传递。即使handoff程序是非block的（比如在riak_kv中没有使用async fold时），在handoff期间，一个vnode也会被block住（所以没有服务命令）。<br />
  handoff状态之后，一个vnode会进入到推进状态。推进状态是新的gossip/membership代码的产物，并且legacy模式的节点里不会出现。推进状态了vnode已经传递自己数据到新节点的情况，但新的节点并未在环上列出当前节点的信息。这会出现是因为增加的vnode仍然在等handoff他们的数据给新的拥有者，或者只是因为环还汇聚在这个新节点之上。在推进状态，所有的vnode指令和coverage命令都会按过程推给新的拥有者。</p>
  
  
  
  
  <p><strong>
  riak_core_vnode:start_manager_event_timer</strong>
  独有的vnode进程与vnode manager结合紧密。当vnode的事件触发，这个vnode必须确保这个事件被发送到vnode manager，这将会产生一个状态变化的决定，并且发回适当的信息给这个vnode。为了最大限度地减少阻塞，使用了异步的消息。vnode manager挂掉而丢失靠vnode发送的信息是可能的。因此，vnode周期性地重发事件消息，直到一个从vnode manager来的合适的消息被接收。</p>
  
  ]]></content>
    </entry>
    
  </feed>
