  <?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Category: Java,arch | 五四陈科学院]]></title>
    <link href="https://www.54chen.com/blog/categories/java-arch/atom.xml" rel="self"/>
    <link href="https://www.54chen.com/"/>
    <updated>2017-12-29T18:10:29+08:00</updated>
    <id>https://www.54chen.com/</id>
    <author>
      <name><![CDATA[54chen]]></name>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>
  
    
    <entry>
      <title type="html"><![CDATA[中大型移动互联网公司技术架构选择]]></title>
      <link href="https://www.54chen.com/blog/2014/03/05/ihaveadream/"/>
      <updated>2014-03-05T16:09:52+08:00</updated>
      <id>https://www.54chen.com/blog/2014/03/05/ihaveadream</id>
      <content type="html"><![CDATA[<h2>总体思考</h2>
  
  <p>总结这些年经验，进行构架演进的方向选择时，大致要做到下面的目标：</p>
  
  <ul>
  <li>可快速开发部署 （五分钟写出来一个经过测试的hello world并可访问/调用，并可在公网访问）</li>
  <li>天然可扩展（业务层无状态，尽可能全部放到最后）</li>
  <li>自动化（内存不足了，除了报警，应该自动加点机器进去; 新的项目，基础代码应该都不用写，自动生成即可）</li>
  <li>框架化（公共层面的东西尽可能框架化，一层类似日志、counter、trace，应该不需要开发再写一行代码即默认打开）</li>
  <li>量化（所有的调用都应该有percentile与rps，透明反馈服务质量，跟踪系统更是可以模拟用户进行系统内部）</li>
  <li>同构化（因为搞两套的成本巨大，整体应该越来越趋同于同一种语言）</li>
  <li>硬件虚拟化（整个平台应该对进程透明下面的硬件情况）</li>
  <li>版本化、灰度化（所有的软件都应该在线上有明确的版本，且上线过程是一点点灰度上）</li>
  </ul>
  
  
  <!-- more -->
  
  
  <p><img src="http://chen54.b0.upaiyun.com/20140305/arch_54chen.jpg" alt="中大型移动互联网公司技术架构选择"></p>
  
  <p>上图纯手绘花了些时间，本文以此图从上到下的顺序进行描述。</p>
  
  <h2>用户</h2>
  
  <p>在移动互联网环境下，用户会被分为好网络的用户和坏网络的用户，我们要为坏网络的用户尽一切可能提供合适的链路和可靠的DNS。</p>
  
  <h2>接入层</h2>
  
  <p>在接入层的代码层面，需要准备client-server套件，这意味着，需要一个同时了解android\ios..等客户端和服务器端开发的团队，专门打造网络套件。</p>
  
  <ul>
  <li>这一层的目标是，让客户端开发人员不再关心网络协议的问题。</li>
  </ul>
  
  
  <h2>业务接入层</h2>
  
  <p>这一层的目标是灵通机动调配流量，往往大家的方案都是LVS，或者是F5等。更高大上一点，再上一些流量分析设备，在有突增的时候好用来找问题。</p>
  
  <h2>业务层</h2>
  
  <p>在统一的业务框架下，去完成各个灵活组织的BIZ逻辑，这里就涉及到异构系统对一个大型公司的影响。</p>
  
  <ul>
  <li>如果80％的人都在使用java的活，还是趁早全用java，因为意味着剩下20％用其他语言的同学，有可能要把这80％的同学做的基础全部实现一遍。</li>
  <li>异构必然会导致某些模块不能完美工作，比如后续的RPC、配置管理、监控报警、跟踪系统等等。</li>
  </ul>
  
  
  <h2>RPC框架与队列</h2>
  
  <p>二者一起完成数据在IDC的传递，不同在于，一个是同步，一个是异步。</p>
  
  <ul>
  <li>统一的RPC框架好处不必言说。</li>
  </ul>
  
  
  <h2>配置管理</h2>
  
  <p>zookeeper当选最佳角色，上点规模的服务里基本都会有zk的身影。</p>
  
  <h2>日志系统</h2>
  
  <p>统一的日志系统，对未来发展中所需要的各种数据更加容易得到。日志系统的特点要求：快，容网络错误，部署简单，进程稳定，可水平扩展。</p>
  
  <ul>
  <li>scribe与kafka都是不错的选择。</li>
  <li>这里最终的日志，可能会需要放到hdfs或者是hbase里进行hive查询，否则数据量大了之后要想把日志用起来很不容易。</li>
  </ul>
  
  
  <h2>监控报警系统</h2>
  
  <p>ganglia与nagios仍旧是最好用的开源管理软件。</p>
  
  <ul>
  <li>需要考虑的是，要将在业务框架里默认记录的公共的perfcounter进行监控与报警。</li>
  </ul>
  
  
  <h2>跟踪系统</h2>
  
  <p>当系统出现bug的时候，用来快速debug，当服务越来越多的时候，跟踪系统是个必不可少的工具。</p>
  
  <ul>
  <li>weibo的zipkin是个不错的开源的实现，不过要使用到自家的代码里来，可能要加工一下。</li>
  </ul>
  
  
  <h2>PAAS Agent Daemon</h2>
  
  <p>整体统一的运维平台的客户端程序，此程序负责:向监控系统汇报硬件及网络数据，启动和停止应用程序，向监控系统和PAAS平台传递应用程序的运行状态。</p>
  
  <h2>存储平台</h2>
  
  <p>此层包括所有重状态的hosting service。</p>
  
  <ul>
  <li>memcached cluster，使用统一的一致性hash客户端，所有的缓存服务器进行统一管理，计算命中率、使用率，实时添加内存。</li>
  <li>DBMS cluster，使用统一的数据库分库分表层，动态地感知和切换故障。常见的项目如mysqlproxy，变形虫。</li>
  <li>HBase cluster，的存储可用性保障，本身也是设计为高可用性的集群。</li>
  </ul>
  
  
  <h2>PAAS 资源控制层</h2>
  
  <p>目标是实时反馈整个或多个IDC内部的内存还有多少、CPU是否够用、下次采购还需要多少机器。</p>
  
  <ul>
  <li>虚拟化是个重点难题。常见开源软件：docker、warden、LXC。</li>
  <li>资源控制CPU可用cgroups，磁盘可用aufs等，一般的虚拟化方案中都已经包括这几项解决办法。</li>
  </ul>
  
  
  <h2>PAAS用户界面层</h2>
  
  <p>这一层主要面向运维和开发人员，比如用来上线服务、添加删除机器。</p>
  
  <ul>
  <li>除了web界面，还应该有cli模式的支持。</li>
  </ul>
  
  
  <h2>自动部署层</h2>
  
  <p>一般都以hudson的CI（持续构建）完成之后进行，但可自动化的部署一定需要测试框架非常靠谱，以及测试代码靠谱，否则就是个悲剧。</p>
  
  <h2>测试框架</h2>
  
  <p>借用一些高级框架，让代码写少一点，比如jmockit、spring-test等等。</p>
  
  <h2>编译工具</h2>
  
  <p>java的maven为不二选择。编译好的包仓库，推荐nexus。</p>
  
  <h2>代码生成</h2>
  
  <p>开发人员不需要重复进行作，只要框架是固定的，所有的代码应该都是可以生成的。只需要花精力去修改核心逻辑。</p>
  
  <ul>
  <li>这里比较抽象，可以用的办法比如做一个maven-plugin，让全部工程师都会用。</li>
  <li>不断地去升级这个工具，使其包括更多的可能的代码方式。</li>
  </ul>
  
  
  <h2>代码质量</h2>
  
  <p>在工程师的代码完成之后，跑一遍静态分析，可以提前发现一些问题，可以做成定期的模式，与持续集成放在一起。</p>
  
  <ul>
  <li>推荐hudson + maven + sonar三剑合一。</li>
  </ul>
  
  
  <h2>代码及常规系统</h2>
  
  <ul>
  <li>代码托管：gitlab是一个不错的类似github（越来越像了）的工具。</li>
  <li>codereview：可直接使用gitlab的merge request，也可以使用开源的reviewboard。</li>
  <li>知识管理：没什么好说的，mediawiki。</li>
  <li>需求与bug：jira。</li>
  <li>故障管理：这个没有开源项目，post-mortem system，是一种记录故障原因的系统，下一次故障来临的时候，来这个系统里进行问卷式的调查和反思。</li>
  </ul>
  
  
  <h2>PAAS for DEV &amp; TEST</h2>
  
  <ul>
  <li>开发阶段需要之前提到的cli可发布到自己的开发机（这里还需要PAAS可很容易地开一个新的开发机）的工具。</li>
  <li>测试阶段需要比开发阶段更加高可用性的环境，而且要时刻提升基础工具的可靠性，不应该让开发环境在发展中消失，反而用测试环境来当作开发环境，现实中发生此类事件的原因，都是部署没有做到完美。</li>
  </ul>
  
  ]]></content>
    </entry>
    
  </feed>
